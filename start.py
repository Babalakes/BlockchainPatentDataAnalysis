# -*- coding: utf-8 -*-
"""index.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkMBgLM5Rfho8mA753aZt7aroa_jeZzj

# Download US patent data

### WRDS

Downloaded from
https://wrds-www.wharton.upenn.edu/login/?next=/pages/get-data/wrds-us-patents/compustat-link/

US Patent Public Search tool:

https://ppubs.uspto.gov/pubwebapp/


| Type | Query |
|---|---|
| Search for keywords<br>in all document | (Cryptocurrency OR bitcoin OR ethereum OR "distributed ledge" OR "consensus mechanism"<br>OR "smart contract" OR "digital asset" OR "non-fungible token" OR <br>"decentralized finance" OR "initial coin offering" OR "decentralized autonomous organization"<br>OR "decentralized application") AND @pd>="2010"<2011 |
| Search in the abstract<br>and brief summary | ((blockchain.ab. OR blockchain.bsum.) OR (Cryptocurrency.ab. OR Cryptocurrency.bsum.) <br>OR (bitcoin.ab. OR bitcoin.bsum.) OR (ethereum.ab. OR ethereum.bsum.) OR <br>("distributed ledge".ab. OR "distributed ledge".bsum.) OR ("consensus mechanism".ab. <br>OR "consensus mechanism".bsum.) OR ("smart contract".ab. OR "smart contract".bsum.) <br>OR ("digital asset".ab. OR "digital asset".bsum.) OR ("non-fungible token".ab. OR <br>"non-fungible token".bsum.) OR ("decentralized finance".ab. OR "decentralized finance".bsum.)<br>OR ("initial coin offering".ab. OR "initial coin offering".bsum.) OR<br>("decentralized autonomous organization".ab. OR "decentralized autonomous organization".bsum.) <br>OR ("decentralized application".ab. OR "decentralized application".bsum.) |


Save the results "DOCUMENT ID" into a csv file: "list_id_query.csv"
"""

import pandas as pd
import numpy as np
from google.colab import drive
drive.mount('/content/drive')

# uspatents_gvkey_linking.csv         = "1btucYyv1-Z1b3fZbAU-qb2k-wDdfVddL"
# uspatents_meta.csv                  = "1IKvPcb9JVCK81Dq-NZz34caWPSjf5pZ8"
# list_id_query.csv                   = "1uOzDjSy-VQU3VjFS_p7mwJIUBl7CoYjm"

!gdown 1uOzDjSy-VQU3VjFS_p7mwJIUBl7CoYjm
!gdown 1IKvPcb9JVCK81Dq-NZz34caWPSjf5pZ8
!gdown 1btucYyv1-Z1b3fZbAU-qb2k-wDdfVddL

df_meta = pd.read_csv("uspatents_meta.csv", low_memory=False)
df_meta.patnum = pd.to_numeric(df_meta.patnum, errors='coerce', downcast='integer')
print(df_meta[["patnum", "grantdate", "appldate"]].head(5))

df_link = pd.read_csv("uspatents_gvkey_linking.csv", low_memory=False)
df_link.patnum = pd.to_numeric(df_link.patnum, errors='coerce', downcast='integer')
print(df_link[["patnum", "gvkey_numeric"]].head(5))

df_list = pd.read_csv("list_id_query.csv", low_memory=False)

df_list.id = df_list.id.replace("US ", "", regex=True)
df_list.id = df_list.id.replace(" A1", "", regex=True)
df_list.id = df_list.id.replace(" B1", "", regex=True)
df_list.id = df_list.id.replace(" B2", "", regex=True)
df_list.id = pd.to_numeric(df_list.id, errors='coerce', downcast='integer')
print(df_list.head(5))

df_list['date_published'] = pd.to_datetime(df_list['date_published'], format="%d/%m/%Y")

# Filter rows with 'date_published' before 2020
df_list = df_list[df_list['date_published'].dt.year < 2020]

print(len(df_list))
print(len(df_list.drop_duplicates(subset=["id"])))

print(len(df_meta))
print(len(df_meta.drop_duplicates(subset=["patnum"])))

df_meta = df_meta.drop_duplicates(subset=["patnum"])
df_meta = df_meta.dropna(subset=["patnum"])

# create a boolean mask
mask = df_meta['patnum'].isin(df_list['id'])

# add new column to df_meta based on the mask
df_meta['present_in_list'] = mask.astype(int)

# print the updated df_meta
print(df_meta[["patnum", "grantdate", "present_in_list"]].head())

df_meta.present_in_list.sum()